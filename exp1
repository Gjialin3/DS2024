#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <random>
#include "Vector.h"
#include "Complex.h"

Vector<Complex> generateRandomComplexVector(size_t count) {
    Vector<Complex> vec;
    for (size_t i = 0; i < count; ++i) {
        double real = static_cast<double>(rand() % 100);
        double imag = static_cast<double>(rand() % 100);
        vec.push_back(Complex(real, imag));
    }
    return vec;
}

void printVector(const Vector<Complex>& vec) {
    for (size_t i = 0; i < vec.getSize(); ++i) {
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
}

void bubbleSort(Vector<Complex>& vec) {
    size_t n = vec.getSize();
    for (size_t i = 0; i < n - 1; ++i) {
        for (size_t j = 0; j < n - i - 1; ++j) {
            if (vec[j].modulus() > vec[j + 1].modulus() || 
                (vec[j].modulus() == vec[j + 1].modulus() && vec[j].getReal() > vec[j + 1].getReal())) {
                std::swap(vec[j], vec[j + 1]);
            }
        }
    }
}

void merge(Vector<Complex>& vec, int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    Vector<Complex> L, R;
    for (i = 0; i < n1; i++) {
        L.push_back(vec[left + i]);
    }
    for (j = 0; j < n2; j++) {
        R.push_back(vec[mid + 1 + j]);
    }

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (L[i].modulus() < R[j].modulus()) {
            vec[k++] = L[i++];
        } else if (L[i].modulus() > R[j].modulus()) {
            vec[k++] = R[j++];
        } else {
            if (L[i].getReal() < R[j].getReal()) {
                vec[k++] = L[i++];
            } else {
                vec[k++] = R[j++];
            }
        }
    }

    while (i < n1) {
        vec[k++] = L[i++];
    }

    while (j < n2) {
        vec[k++] = R[j++];
    }
}

void mergeSort(Vector<Complex>& vec, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(vec, left, mid);
        mergeSort(vec, mid + 1, right);
        merge(vec, left, mid, right);
    }
}

int main() {
    srand(static_cast<unsigned>(time(0)));

    // 生成无序复数向量
    Vector<Complex> complexVec = generateRandomComplexVector(20);
    std::cout << "Original vector: ";
    printVector(complexVec);

    // 置乱
    std::vector<int> indices(complexVec.getSize());
    std::iota(indices.begin(), indices.end(), 0);  // Fill indices
    std::shuffle(indices.begin(), indices.end(), std::default_random_engine{});

    Vector<Complex> shuffledVec;
    for (int index : indices) {
        shuffledVec.push_back(complexVec[index]);
    }

    std::cout << "Shuffled vector: ";
    printVector(shuffledVec);

    // 查找测试（查找实部和虚部相同的复数）
    for (size_t i = 0; i < shuffledVec.getSize(); ++i) {
        if (shuffledVec[i].getReal() == shuffledVec[i].getImag()) {
            std::cout << "Found: " << shuffledVec[i] << std::endl;
        }
    }

    // 插入及删除操作
    shuffledVec.push_back(Complex(5, 5));
    std::cout << "After insertion: ";
    printVector(shuffledVec);
    shuffledVec.pop_back();
    std::cout << "After deletion: ";
    printVector(shuffledVec);

    // 唯一化操作
    shuffledVec.unique();
    std::cout << "Unique vector: ";
    printVector(shuffledVec);

    // 排序操作
    Vector<Complex> sortedVec = shuffledVec; // 拷贝一份原始向量
    mergeSort(sortedVec, 0, sortedVec.getSize() - 1);

    std::cout << "Sorted vector: ";
    printVector(sortedVec);

    // 区间查找示例
    double m1 = 5, m2 = 8;
    Vector<Complex> intervalVec;
    for (size_t i = 0; i < sortedVec.getSize(); ++i) {
        double mod = sortedVec[i].modulus();
        if (mod >= m1 && mod < m2) {
            intervalVec.push_back(sortedVec[i]);
        }
    }
    std::cout << "Elements in modulus range [" << m1 << ", " << m2 << "): ";
    printVector(intervalVec);

    return 0;
}
