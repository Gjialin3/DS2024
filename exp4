#include <iostream>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <limits>
#include <algorithm>
#include <utility> // std::pair

class Graph {
public:
    Graph(int vertices);
    void addEdge(int v, int w);
    void BFS(int startVertex);
    void DFS(int startVertex);
    void Dijkstra(int startVertex);
    void Prim();

private:
    int vertices;
    std::vector<std::list<int>> adj; // 邻接表

    void DFSUtil(int v, std::vector<bool>& visited);
};

Graph::Graph(int vertices) : vertices(vertices) {
    adj.resize(vertices);
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
    adj[w].push_back(v); // 对于无向图
}

void Graph::BFS(int startVertex) {
    std::vector<bool> visited(vertices, false);
    std::queue<int> queue;

    visited[startVertex] = true;
    queue.push(startVertex);

    while (!queue.empty()) {
        int v = queue.front();
        queue.pop();
        std::cout << v << " ";

        for (int neighbor : adj[v]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                queue.push(neighbor);
            }
        }
    }
    std::cout << std::endl;
}

void Graph::DFSUtil(int v, std::vector<bool>& visited) {
    visited[v] = true;
    std::cout << v << " ";

    for (int neighbor : adj[v]) {
        if (!visited[neighbor]) {
            DFSUtil(neighbor, visited);
        }
    }
}

void Graph::DFS(int startVertex) {
    std::vector<bool> visited(vertices, false);
    DFSUtil(startVertex, visited);
    std::cout << std::endl;
}

void Graph::Dijkstra(int startVertex) {
    std::vector<int> dist(vertices, std::numeric_limits<int>::max());
    std::vector<bool> visited(vertices, false);
    dist[startVertex] = 0;
    
    using Pair = std::pair<int, int>; // {距离, 节点}
    std::priority_queue<Pair, std::vector<Pair>, std::greater<Pair>> pq; // 最小堆
    pq.push({0, startVertex});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (int neighbor : adj[u]) {
            if (dist[u] + 1 < dist[neighbor]) { // 假设每条边的权重为1
                dist[neighbor] = dist[u] + 1;
                pq.push({dist[neighbor], neighbor});
            }
        }
    }

    for (int i = 0; i < vertices; ++i) {
        std::cout << "Distance from " << startVertex << " to " << i << " is " << dist[i] << std::endl;
    }
}

void Graph::Prim() {
    std::vector<bool> inMST(vertices, false);
    std::vector<int> minEdge(vertices, std::numeric_limits<int>::max());
    std::vector<int> parent(vertices, -1);

    minEdge[0] = 0;
    using Pair = std::pair<int, int>; // {权重, 节点}
    std::priority_queue<Pair, std::vector<Pair>, std::greater<Pair>> pq; // 最小堆
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        inMST[u] = true;

        for (int v : adj[u]) {
            if (!inMST[v] && minEdge[v] > 1) { // 假设每条边的权重为1
                parent[v] = u;
                minEdge[v] = 1;
                pq.push({minEdge[v], v});
            }
        }
    }

    for (int i = 1; i < vertices; ++i) {
        std::cout << "Edge: " << parent[i] << " - " << i << " (Weight: " << minEdge[i] << ")" << std::endl;
    }
}
int main() {
    Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 4);

    std::cout << "BFS from vertex 0: ";
    g.BFS(0); // 出发节点进行 BFS

    std::cout << "DFS from vertex 0: ";
    g.DFS(0); // 出发节点进行 DFS

    std::cout << "Dijkstra's shortest paths from vertex 0:" << std::endl;
    g.Dijkstra(0); // 从节点0开始Dijkstra算法

    std::cout << "Minimum Spanning Tree (Prim's algorithm):" << std::endl;
    g.Prim(); // 使用Prim算法输出最小生成树
    return 0;
}

