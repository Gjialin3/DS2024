using Rank = unsigned int; 
#define DEFAULT_CAPACITY  3 
template <typename T> class Vector { 
protected:
Rank _size; Rank _capacity;  T* _elem; 
void copyFrom ( T const* A, Rank lo, Rank hi );
void expand(); 
void shrink();
bool bubble ( Rank lo, Rank hi ); 
void bubbleSort ( Rank lo, Rank hi );
Rank maxItem ( Rank lo, Rank hi ); 
void selectionSort ( Rank lo, Rank hi ); 
void merge ( Rank lo, Rank mi, Rank hi );
void mergeSort ( Rank lo, Rank hi ); 
void heapSort ( Rank lo, Rank hi ); 
Rank partition ( Rank lo, Rank hi );
void quickSort ( Rank lo, Rank hi ); 
void shellSort ( Rank lo, Rank hi ); 
public:
Vector ( Rank c = DEFAULT_CAPACITY ) 
{ _elem = new T[_capacity = c]; _size = 0; }
Vector ( Rank c, Rank s, T v ) 
{ _elem = new T[_capacity = c]; for ( _size = 0; _size < s; _elem[_size++] = v ); }
Vector ( T const* A, Rank n ) { copyFrom ( A, 0, n ); } 
Vector ( T const* A, Rank lo, Rank hi ) { copyFrom ( A, lo, hi ); } 
Vector ( Vector<T> const& V ) { copyFrom ( V._elem, 0, V._size ); } 
Vector ( Vector<T> const& V, Rank lo, Rank hi ) { copyFrom ( V._elem, lo, hi ); } 
~Vector() { delete [] _elem; } 
Rank size() const { return _size; } 
bool empty() const { return !_size; }
Rank find ( T const& e ) const { return find ( e, 0, _size ); } 
Rank find ( T const& e, Rank lo, Rank hi ) const;
Rank select( Rank k ) { return quickSelect( _elem, _size, k ); } 
Rank search( T const& e ) const 
{ return ( 0 >= _size ) ? -1 : search ( e, 0, _size ); }
Rank search ( T const& e, Rank lo, Rank hi ) const; 
T& operator[] ( Rank r ); 
const T& operator[] ( Rank r ) const; 
Vector<T> & operator= ( Vector<T> const& );
T remove ( Rank r ); 
Rank remove ( Rank lo, Rank hi ); 
Rank insert ( Rank r, T const& e ); 
Rank insert ( T const& e ) { return insert ( _size, e ); } 
void sort ( Rank lo, Rank hi ); 
void sort() { sort ( 0, _size ); } 
void unsort ( Rank lo, Rank hi ); 
void unsort() { unsort ( 0, _size ); } 
Rank dedup();
Rank uniquify();
void traverse ( void (* ) ( T& ) );
template <typename VST> void traverse ( VST& ); 
}; //Vector
#ifndef VECTOR_H
#define VECTOR_H
#include <iostream>
template <typename T>
class Vector {
private:
    T* data;
    int size;
    int capacity;
public:
    Vector();
    ~Vector();
    void push_back(const T& value);
    void pop_back();
    void insert(int index, const T& value);
    void erase(int index);
};
#include "vector.cpp"
#endif
#include "vector.h"
template <typename T>
Vector<T>::Vector() : data(nullptr), size(0), capacity(0) {}
template <typename T>
Vector<T>::~Vector() {
    if (data) {
        delete[] data;
    }
}
template <typename T>
void Vector<T>::push_back(const T& value) {
    if (size == capacity) {
        int newCapacity = capacity == 0? 1 : capacity * 2;
        T* newData = new T[newCapacity];
        for (int i = 0; i < size; i++) {
            newData[i] = data[i];
        }
        if (data) delete[] data;
        data = newData;
        capacity = newCapacity;
    }
    data[size++] = value;
}
template <typename T>
void Vector<T>::pop_back() {
    if (size > 0) {
        size--;
    }
}
template <typename T>
void Vector<T>::insert(int index, const T& value) {
    if (index < 0 || index > size) {
        throw std::out_of_range("Index out of range");
    }
    if (size == capacity) {
        int newCapacity = capacity == 0? 1 : capacity * 2;
        T* newData = new T[newCapacity];
            for (int i = 0; i < index; i++) {
                newData[i] = data[i];
            }
            newData[index] = value;
            for (int i = index; i < size; i++) {
                newData[i + 1] = data[i];
            }
            if (data) delete[] data;
            data = newData;
            capacity = newCapacity;
        } else {
            for (int i = size; i > index; i--) {
                data[i] = data[i - 1];
            }
            data[index] = value;
        }
        size++;
}
template <typename T>
void Vector<T>::erase(int index) {
    if (index < 0 || index >= size) {
        throw std::out_of_range("Index out of range");
    }
    for (int i = index; i < size - 1; i++) {
        data[i] = data[i + 1];
    }
    size--;
}
#ifndef COMPLEX_H
#define COMPLEX_H

class Complex {
private:
    double real;
    double imag;
public:
    Complex(double r = 0.0, double i = 0.0);
    double getReal() const;
    double getImag() const;
    double modulus() const;
    bool operator==(const Complex& other) const;
    friend bool compareComplexByModulus(const Complex& a, const Complex& b);
};
#include "complex.cpp"
#endif
#include "complex.h"

Complex::Complex(double r, double i) : real(r), imag(i) {}

double Complex::getReal() const {
    return real;
}
double Complex::getImag() const {
    return imag;
}
double Complex::modulus() const {
    return std::sqrt(real * real + imag * imag);
}
bool Complex::operator==(const Complex& other) const {
    return (real == other.real) && (imag == other.imag);
}
bool compareComplexByModulus(const Complex& a, const Complex& b) {
    double modA = a.modulus();
    double modB = b.modulus();
    if (modA < modB) return true;
    if (modA > modB) return false;
    return a.getReal() < b.getReal();
}
#ifndef SORTING_ALGORITHMS_H
#define SORTING_ALGORITHMS_H
#include <vector>
#include "complex.h"
template <typename T>
void bubbleSort(std::vector<T>& vec, bool (*compare)(const T&, const T&));
template <typename T>
void mergeSort(std::vector<T>& vec, typename std::vector<T>::iterator left, typename std::vector<T>::iterator right, bool (*compare)(const T&, const T&));
#include "sorting_algorithms.cpp"
#endif
#include "sorting_algorithms.h"
template <typename T>
void bubbleSort(std::vector<T>& vec, bool (*compare)(const T&, const T&)) {
    int n = vec.size();
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (compare(vec[j], vec[j + 1])) {
                std::swap(vec[j], vec[j] + 1);
                swapped = true;
            }
        }
        if (!swapped) break;
    }
}
template <typename T>
void mergeSort(std::vector<T>& vec, typename std::vector<T>::iterator left, typename std::vector<T>::iterator right, bool (*compare)(const T&, const T&)) {
    if (std::distance(left, right) > 1) {
        auto mid = left + std::distance(left, right) / 2;
        mergeSort(vec, left, mid, compare);
        mergeSort(vec, mid, right, compare);
        std::vector<T> temp;
        auto first = left, second = mid;
        while (first < mid && second < right) {
            if (compare(*first, *second)) {
                temp.push_back(*first++);
            } else {
                temp.push_back(*second++);
            }
        }
        while (first < mid) {
            temp.push_back(*first++);
        }
        while (second < right) {
            temp.push_back(*second++);
        }
        std::copy(temp.begin(), temp.end(), left); // 正确覆盖合并结果
    }
}
