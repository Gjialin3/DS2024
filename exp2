#include <iostream>
#include <vector>
#include <stack>
#include <sstream>
#include <stdexcept>
#include <ctime> // 更改头文件以使用 time

class Stack {
private:
    std::vector<int> elements;

public:
    void push(int value) {
        elements.push_back(value);
    }

    int pop() {
        if (isEmpty()) {
            throw std::out_of_range("Stack is empty");
        }
        int value = elements.back();
        elements.pop_back();
        return value;
    }

    bool isEmpty() const {
        return elements.empty();
    }
};

class Calculator {
private:
    Stack stack;

    int applyOperation(int a, int b, char op) {
        switch (op) {
            case '+': return a + b;
            case '-': return a - b;
            case '*': return a * b;
            case '/': 
                if (b == 0) throw std::invalid_argument("Division by zero");
                return a / b;
            default: throw std::invalid_argument("Invalid operator");
        }
    }

public:
    int evaluate(const std::string& expression) {
        std::istringstream tokens(expression);
        char op;
        int number;
        int result = 0;
        char lastOperator = '+';

        while (tokens >> number) {
            if (lastOperator == '+' || lastOperator == '-') {
                stack.push((lastOperator == '+') ? number : -number);
            } else {
                int top = stack.pop();
                stack.push(applyOperation(top, number, lastOperator));
            }
            if (!(tokens >> lastOperator)) break; // 读取下一个操作符
        }

        while (!stack.isEmpty()) {
            result += stack.pop();
        }

        return result;
    }
};

int largestRectangleArea(const std::vector<int>& heights) {
    std::stack<int> indices;
    int maxArea = 0;
    int n = heights.size();

    for (int i = 0; i <= n; ++i) {
        int h = (i == n) ? 0 : heights[i];
        while (!indices.empty() && heights[indices.top()] > h) {
            int height = heights[indices.top()];
            indices.pop();
            int width = indices.empty() ? i : i - indices.top() - 1;
            maxArea = std::max(maxArea, height * width);
        }
        indices.push(i);
    }

    return maxArea;
}

void generateRandomHeights(int n) {
    std::vector<int> heights(n);
    for (int i = 0; i < n; i++) {
        heights[i] = rand() % 100 + 1; // 随机生成1到100之间的高度
    }

    std::cout << "Heights: ";
    for (int h : heights) {
        std::cout << h << " ";
    }
    std::cout << std::endl;

    int maxArea = largestRectangleArea(heights);
    std::cout << "Max Area: " << maxArea << std::endl;
}

int main() {
    srand(static_cast<unsigned>(time(0))); // 更改为time(0)

    for (int i = 0; i < 10; i++) {
        int n = rand() % 100 + 1;
        generateRandomHeights(n);
    }

    // 测试计算器
    Calculator calc;
    std::string expr = "3 + 5 - 2 * 2 / 1";
    std::cout << "Result of '" << expr << "' is: " << calc.evaluate(expr) << std::endl;
    
    // 示例 1
    std::vector<int> example1 = {2, 1, 5, 6, 2, 3};
    std::cout << "Example 1 Heights: ";
    for (int h : example1) {
        std::cout << h << " ";
    }
    std::cout << "\nMax Area: " << largestRectangleArea(example1) << std::endl;

    // 示例 2
    std::vector<int> example2 = {2, 4};
    std::cout << "Example 2 Heights: ";
    for (int h : example2) {
        std::cout << h << " ";
    }
    std::cout << "\nMax Area: " << largestRectangleArea(example2) << std::endl;

    return 0;
}
